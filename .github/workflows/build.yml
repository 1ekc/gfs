name: Windows Self-Hosted Build

on:
  workflow_dispatch:
  push:

jobs:
  build:
    runs-on: self-hosted
    environment: production

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      # Начальная настройка
      - name: Initialize environment
        run: |
          [System.Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          [System.Console]::InputEncoding = [System.Text.Encoding]::UTF8
          chcp 65001
          echo "PYTHONIOENCODING=UTF-8" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "PYTHONUTF8=1" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # Установка системных зависимостей
      - name: Install Windows dependencies
        run: |
          choco install ffmpeg pngquant imagemagick git-lfs nodejs -y --no-progress
          Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
          refreshenv
          ffmpeg -version
          pngquant --version
          magick --version
          git lfs version
          node --version

      # Установка vgmstream
      - name: Install vgmstream
        run: |
          Invoke-WebRequest -Uri "https://github.com/vgmstream/vgmstream-releases/releases/download/nightly/vgmstream-win64.zip" -OutFile "vgmstream.zip"
          Expand-Archive -Path "vgmstream.zip" -DestinationPath "bin" -Force
          Remove-Item -Path "vgmstream.zip"
          echo "$PWD\bin" | Out-File -FilePath $env:GITHUB_PATH -Append -Encoding utf8

      # Настройка PNPM с явным указанием версии
      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 9.4.0
          run_install: false

      # Кэширование Python окружения
      - name: Cache Python environment
        uses: actions/cache@v3
        id: cache-python
        with:
          path: |
            .venv
          key: python-env-${{ runner.os }}-${{ hashFiles('unpack/requirements.txt') }}

      # Создание и активация виртуального окружения
      - name: Setup Python environment
        run: |
          if ("${{ steps.cache-python.outputs.cache-hit }}" -ne 'true') {
            python -m venv .venv
          }
          .\.venv\Scripts\activate
          pip install --upgrade pip wheel setuptools
          pip install chardet==5.2.0 pyjson5==1.6.1
          cd unpack
          pip install -r requirements.txt
          cd downloader
          pip install -r requirements.txt
          cd ../..
          python -c "import chardet; print(f'chardet {chardet.__version__} installed')"

      # Исправление ошибок импорта в коде
      - name: Fix import issues in gfunpack
        run: |
          $utilsPath = "unpack/src/gfunpack/utils.py"
          $utilsContent = Get-Content $utilsPath -Raw
          if (-not $utilsContent.Contains("from pathlib import Path")) {
            $utilsContent = "from pathlib import Path`n`n" + $utilsContent
          }
          $utilsContent = $utilsContent -replace 'data\.(name|asset_name)', 'data.assets_file'
          Set-Content -Path $utilsPath -Value $utilsContent -Encoding UTF8
          
          $prefabsPath = "unpack/src/gfunpack/prefabs.py"
          $prefabsContent = Get-Content $prefabsPath -Raw
          if (-not $prefabsContent.Contains("from typing import List, Dict")) {
            $prefabsContent = "from typing import List, Dict`n" + $prefabsContent
          }
          if (-not $prefabsContent.Contains("from .models import GameObject")) {
            $prefabsContent = "from .models import GameObject`n" + $prefabsContent
          }
          Set-Content -Path $prefabsPath -Value $prefabsContent -Encoding UTF8

      # Загрузка ресурсов
      - name: Download resources
        env:
          GD_DATA: ${{ secrets.GD_DATA }}
        run: |
          .\.venv\Scripts\activate
          cd unpack/downloader
          if (!(Test-Path "config.json5")) {
            Write-Error "File config.json5 not found!"
            exit 1
          }
          python downloader.py --folder-id "1YPAEYsvjs8UjMLNogu_VtUIWW0rr4-Ls"

      # Проверка и использование gf-data-rus при необходимости (ИСПРАВЛЕННЫЙ ШАГ)
      - name: Check and use gf-data-rus if needed
        run: |
          .\.venv\Scripts\activate
          cd unpack

          # Проверяем основные файлы
          $requiredFiles = @(
              "downloader/output/asset_textes.ab",
              "downloader/output/asset_avg.ab",
              "downloader/output/asset_stories.ab"
          )

          $useFallback = $false
          foreach ($file in $requiredFiles) {
              if (-not (Test-Path $file)) {
                  Write-Host "File $file not found, will use gf-data-rus folder"
                  $useFallback = $true
                  break
              }
          }

          # Если основные файлы есть, проверяем наличие конкретных ассетов
          if (-not $useFallback) {
              $requiredAssets = @(
                  "assets/resources/textdata/audiotemplate.txt",
                  "assets/resources/dabao/avgtxt/profiles.txt"
              )
              
              foreach ($asset in $requiredAssets) {
                  $found = Test-AssetFile "downloader/output/asset_textes.ab" $asset
                  if (-not $found) {
                      Write-Host "Asset $asset not found, will use gf-data-rus folder"
                      $useFallback = $true
                      break
                  }
              }
          }

          # Если нужно использовать fallback
          if ($useFallback) {
              if (Test-Path "gf-data-rus") {
                  Write-Host "Copying files from gf-data-rus..."
                  Get-ChildItem -Path "gf-data-rus" -Recurse | ForEach-Object {
                      $relativePath = $_.FullName.Substring((Resolve-Path "gf-data-rus").Path.Length + 1)
                      $dest = Join-Path "downloader/output" $relativePath
                      $destDir = Split-Path -Path $dest -Parent
                      if (-not (Test-Path $destDir)) {
                          New-Item -ItemType Directory -Path $destDir -Force | Out-Null
                      }
                      Copy-Item -Path $_.FullName -Destination $dest -Force
                  }
              } else {
                  Write-Host "::error::Folder gf-data-rus not found!"
                  exit 1
              }
          }

      # Обработка ресурсов
# Улучшенный шаг: Process assets
      - name: Process assets
        run: |
          .\.venv\Scripts\activate
          cd unpack
          $env:PYTHONPATH = "$pwd\src"
          
          # Проверка с выводом точных путей
          $missing = @()
          $requiredFiles = @(
              "downloader/output/asset_textes.ab",
              "downloader/output/asset_avg.ab"
          )
          foreach ($file in $requiredFiles) {
              if (-not (Test-Path $file)) {
                  $missing += $file
              }
          }
          
          if ($missing.Count -gt 0) {
              Write-Host "::error::Missing required files:"
              $missing | ForEach-Object { Write-Host "  - $_" }
              exit 1
          }
          
          # Запуск тестов с обработкой ошибок
          $testScripts = @(
              "tests/test_backgrounds.py",
              "tests/test_characters.py",
              "tests/test_audio.py"
          )
          
          foreach ($script in $testScripts) {
              python $script
              if ($LASTEXITCODE -ne 0) {
                  Write-Host "::error::Test failed: $script"
                  exit $LASTEXITCODE
              }
          }

      # Распаковка ресурсов
      - name: Unpack resources
        run: |
          $ErrorActionPreference = "Stop"
          .\.venv\Scripts\activate
          cd unpack
          python -m gfunpack downloader/output -o .
          
          # Проверка созданных файлов
          $requiredFiles = @(
              "audio/audio.json",
              "images/backgrounds.json",
              "images/characters.json",
              "stories/stories.json",
              "stories/chapters.json"
          )
          foreach ($file in $requiredFiles) {
              if (-not (Test-Path $file)) {
                  Write-Host "::warning file=$file::File $file not found"
              }
          }

      # Перемещение ресурсов
      - name: Move resources
        run: |
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          cd unpack
          
          New-Item -ItemType Directory -Path "../src/assets" -Force | Out-Null
          New-Item -ItemType Directory -Path "../public" -Force | Out-Null
          
          $jsonFiles = @(
              "audio/audio.json",
              "images/backgrounds.json",
              "images/characters.json",
              "stories/stories.json",
              "stories/chapters.json"
          )
          foreach ($file in $jsonFiles) {
              if (Test-Path $file) {
                  Copy-Item $file "../src/assets" -Force
              }
          }
          
          $folders = @("audio", "images", "stories")
          foreach ($folder in $folders) {
              if (Test-Path $folder) {
                  Move-Item $folder "../public" -Force
              }
          }

      # Установка зависимостей Node.js
      - name: Install Node.js dependencies
        run: |
          pnpm install --frozen-lockfile

      # Сборка сайта
      - name: Build site
        run: |
          # Проверка файлов
          $requiredAssets = @(
              "src/assets/audio.json",
              "src/assets/backgrounds.json",
              "src/assets/characters.json",
              "src/assets/stories.json",
              "src/assets/chapters.json"
          )
          foreach ($file in $requiredAssets) {
              if (-not (Test-Path $file)) {
                  Write-Host "::error file=$file::Required file missing"
                  exit 1
              }
          }
          
          pnpm build-index
          pnpm build

      # Публикация
      - name: Publish to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
          directory: dist