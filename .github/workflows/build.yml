name: Windows Self-Hosted Build

on:
  workflow_dispatch:
  push:

jobs:
  build:
    runs-on: self-hosted
    environment: production

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Initialize environment
        run: |
          [System.Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          [System.Console]::InputEncoding = [System.Text.Encoding]::UTF8
          chcp 65001
          echo "PYTHONIOENCODING=UTF-8" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "PYTHONUTF8=1" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Install Windows dependencies
        run: |
          choco install ffmpeg pngquant imagemagick git-lfs nodejs -y --no-progress
          Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
          refreshenv
          ffmpeg -version
          pngquant --version
          magick --version
          git lfs version
          node --version

      - name: Install vgmstream
        run: |
          Invoke-WebRequest -Uri "https://github.com/vgmstream/vgmstream-releases/releases/download/nightly/vgmstream-win64.zip" -OutFile "vgmstream.zip"
          Expand-Archive -Path "vgmstream.zip" -DestinationPath "bin" -Force
          Remove-Item -Path "vgmstream.zip"
          echo "$PWD\bin" | Out-File -FilePath $env:GITHUB_PATH -Append -Encoding utf8

      - name: Setup PNPM
        run: |
          npm install -g pnpm
          pnpm -v

      - name: Cache Python environment
        uses: actions/cache@v3
        id: cache-python
        with:
          path: .venv
          key: python-env-${{ runner.os }}-${{ hashFiles('unpack/requirements.txt') }}

      - name: Setup Python environment
        run: |
          python -m venv .venv
          .\.venv\Scripts\activate
          pip install --upgrade pip wheel setuptools
          
          # Установка конкретных версий проблемных библиотек
          pip install UnityPy==1.10.1 chardet==5.2.0 pyjson5==1.6.1
          
          cd unpack
          pip install -r requirements.txt
          
          # Применяем критические исправления кода
          $utilsFile = "src/gfunpack/utils.py"
          $newUtilsCode = @"
import UnityPy
from pathlib import Path
import logging

logger = logging.getLogger(__name__)

def read_text_asset(asset_path: Path, asset_name: str) -> str:
    try:
        env = UnityPy.load(str(asset_path))
        for obj in env.objects:
            if obj.type.name == 'TextAsset':
                data = obj.read()
                if data.name == asset_name:
                    if isinstance(data.m_Script, bytes):
                        return data.m_Script.decode('utf-8')
                    elif isinstance(data.m_Script, str):
                        return data.m_Script
                    else:
                        return str(data.m_Script)
        raise ValueError(f"Asset {asset_name} not found in {asset_path}")
    except Exception as e:
        logger.error(f"Error reading text asset {asset_name}: {e}")
        return ""
"@
          $newUtilsCode | Set-Content $utilsFile -Encoding UTF8
          
          $prefabsFile = "src/gfunpack/prefabs.py"
          (Get-Content $prefabsFile) | ForEach-Object {
              $_ -replace "if data.name is not None and data.name != '':", 
                          "if hasattr(data, 'm_Name') and data.m_Name is not None and data.m_Name != '':"
          } | Set-Content $prefabsFile -Encoding UTF8

      - name: Restore cached resources
        id: restore-resources
        uses: actions/cache/restore@v4
        with:
          path: |
            unpack/downloader/output
            unpack/images
            unpack/audio
          key: resources-${{ runner.os }}-${{ github.sha }}

      - name: Download resources (if cache missed)
        if: steps.restore-resources.outputs.cache-hit != 'true'
        env:
          GD_DATA: ${{ secrets.GD_DATA }}
        run: |
          .\.venv\Scripts\activate
          cd unpack/downloader
          python downloader.py --folder-id "1YPAEYsvjs8UjMLNogu_VtUIWW0rr4-Ls"

      - name: Process assets
        run: |
          .\.venv\Scripts\activate
          cd unpack
          
          # Обработка изображений с обработкой ошибок
          try {
              python tests/test_backgrounds.py
          } catch {
              Write-Host "::warning::Background processing failed, continuing..."
          }
          
          try {
              python tests/test_characters.py
          } catch {
              Write-Host "::warning::Character processing failed, continuing..."
          }
          
          try {
              python tests/test_audio.py
          } catch {
              Write-Host "::warning::Audio processing failed, continuing..."
          }

      - name: Unpack resources
        run: |
          .\.venv\Scripts\activate
          cd unpack
          python -m gfunpack downloader/output -o .

      - name: Move resources
        run: |
          cd unpack
          New-Item -ItemType Directory -Path "../src/assets" -Force
          New-Item -ItemType Directory -Path "../public" -Force
          
          # Копирование JSON с проверкой
          $jsonFiles = @("audio.json", "backgrounds.json", "characters.json", "stories.json", "chapters.json")
          foreach ($file in $jsonFiles) {
              $src = "stories/$file"
              if (Test-Path $src) {
                  Copy-Item $src "../src/assets" -Force
              } else {
                  Write-Host "::warning::File not found: $src"
              }
          }
          
          # Перемещение папок
          $folders = @("audio", "images", "stories")
          foreach ($folder in $folders) {
              if (Test-Path $folder) {
                  Move-Item $folder "../public" -Force
              }
          }

      - name: Build site
        run: |
          # Продолжаем даже если некоторые файлы отсутствуют
          $requiredAssets = @("audio.json", "backgrounds.json", "characters.json", "stories.json", "chapters.json")
          foreach ($file in $requiredAssets) {
              if (-not (Test-Path "src/assets/$file")) {
                  Write-Host "::warning::Missing asset file: src/assets/$file"
                  # Создаем пустой файл для продолжения сборки
                  New-Item -Path "src/assets/$file" -ItemType File -Force
              }
          }
          
          pnpm install --frozen-lockfile
          pnpm build-index
          pnpm build

      - name: Publish to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
          directory: dist