name: Windows Self-Hosted Build

on:
  workflow_dispatch:
  push:
jobs:
  build:
    runs-on: self-hosted
    environment: production
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      # System configuration
      - name: Configure system encoding
        run: |
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          chcp 65001 | Out-Null
          git config --global core.quotepath false
          $env:PYTHONUTF8 = "1"
          $env:LC_ALL = "C.UTF-8"

      # Dependency checks
      - name: Check Disk Space (Windows)
        run: |
          Get-Volume | Format-Table -AutoSize DriveLetter, SizeRemaining, Size

      # Package installation
      - name: Install Windows Dependencies
        run: |
          choco install ffmpeg pngquant imagemagick git-lfs nodejs -y --no-progress
          Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
          refreshenv
          ffmpeg -version
          pngquant --version
          magick --version
          git lfs version
          node --version

      # Setup Git LFS
      - name: Setup Git LFS
        run: |
          git lfs install
          git lfs track "*.wav" "*.mp3" "*.png" "*.jpg" "*.webp" "*.zip"
          git add .gitattributes

      # Audio tools setup
      - name: Install vgmstream
        run: |
          Invoke-WebRequest -Uri "https://github.com/vgmstream/vgmstream-releases/releases/download/nightly/vgmstream-win64.zip" -OutFile "vgmstream.zip"
          Expand-Archive -Path "vgmstream.zip" -DestinationPath "bin" -Force
          Remove-Item -Path "vgmstream.zip"
          echo "$PWD\bin" | Out-File -FilePath $env:GITHUB_PATH -Append -Encoding utf8

      # Build system setup
      - name: Setup PNPM
        run: |
          npm install -g pnpm
          pnpm -v

      # Resource handling
      - name: Restore Cached Resources
        id: restore-gf-downloader-resources
        uses: actions/cache/restore@v4
        with:
          path: |
            unpack/downloader/output
          key: gf-downloader-resources-${{ runner.os }}

      # Python environment
      - name: Setup Python Environment
        run: |
          python -m pip install --upgrade pip
          pip install pdm
          cd unpack
          pdm config venv.in_project true
          pdm install
          .\.venv\Scripts\activate
          pip install pyjson5
          pip install -r downloader/requirements.txt

      # Resource download fallback
      - name: Download Resources (if cache missed)
        if: steps.restore-gf-downloader-resources.outputs.cache-hit != 'true'
        env:
          GD_DATA: ${{ secrets.GD_DATA }}
        run: |
          cd unpack/downloader
          if (!(Test-Path "config.json5")) {
              Write-Error "config.json5 file not found!"
              exit 1
          }
          python downloader.py --folder-id "1YPAEYsvjs8UjMLNogu_VtUIWW0rr4-Ls"

      # Cache management
      - name: Cache Downloaded Resources
        uses: actions/cache/save@v4
        with:
          path: |
            unpack/downloader/output
          key: ${{ steps.restore-gf-downloader-resources.outputs.cache-primary-key }}

      # Image processing
      - name: Restore Cached Images
        id: restore-image-resources
        uses: actions/cache/restore@v4
        with:
          path: |
            unpack/images
          key: gf-image-resources-${{ runner.os }}

      - name: Process images
        run: |
          cd unpack
          .\.venv\Scripts\activate
          python tests/test_backgrounds.py
          python tests/test_characters.py

      - name: Cache Images
        uses: actions/cache/save@v4
        with:
          path: |
            unpack/images
          key: ${{ steps.restore-image-resources.outputs.cache-primary-key }}

      # Audio processing
      - name: Restore Cached Audio
        id: restore-audio-resources
        uses: actions/cache/restore@v4
        with:
          path: |
            unpack/audio
          key: gf-audio-resources-${{ runner.os }}

      - name: Validate Audio Resources
        run: |
          $requiredAudioFiles = @(
              "unpack/downloader/output/asset_textes.ab",
              "unpack/downloader/output/AVG.acb.dat"
          )
          foreach ($file in $requiredAudioFiles) {
              if (-not (Test-Path $file)) {
                  Write-Host "::error file=$file::Required audio file missing"
                  exit 1
              }
          }

      - name: Process audio
        run: |
          cd unpack
          .\.venv\Scripts\activate
          python tests/test_audio.py

      - name: Verify Audio Output
        run: |
          if (-not (Test-Path "unpack/audio/audio.json")) {
              Write-Host "::error::Audio processing failed - no output JSON"
              exit 1
          }
          $audioJson = Get-Content "unpack/audio/audio.json" | ConvertFrom-Json
          if ($audioJson.Count -eq 0) {
              Write-Host "::error::Audio JSON is empty"
              exit 1
          }

      - name: Cache Audio
        uses: actions/cache/save@v4
        with:
          path: |
            unpack/audio
          key: ${{ steps.restore-audio-resources.outputs.cache-primary-key }}

      # Main unpacking process
      - name: Unpack resources
        run: |
          $ErrorActionPreference = "Stop"
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          
          cd unpack
          .\.venv\Scripts\activate

          Write-Host "=== File structure before unpacking ==="
          Get-ChildItem -Recurse | Format-Table FullName -AutoSize

          try {
              python -m gfunpack downloader/output -o . 2>&1 | Tee-Object -FilePath "unpack.log"
              if ($LASTEXITCODE -ne 0) {
                  throw "Unpack failed with exit code $LASTEXITCODE"
              }
          } catch {
              Get-Content "unpack.log" | ForEach-Object { Write-Host $_ }
              Write-Host "::error::Resource unpacking failed"
              exit 1
          }

          # Output validation
          $requiredFiles = @(
              "audio/audio.json",
              "images/backgrounds.json",
              "images/characters.json",
              "stories/stories.json",
              "stories/chapters.json"
          )

          foreach ($file in $requiredFiles) {
              if (-not (Test-Path $file)) {
                  Write-Host "::warning file=$file::File $file not found"
              } else {
                  Write-Host "Found file: $file"
              }
          }

      # Resource deployment
      - name: Deploy resources
        run: |
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          cd unpack

          # Create directories
          New-Item -ItemType Directory -Path "../src/assets" -Force | Out-Null
          New-Item -ItemType Directory -Path "../public" -Force | Out-Null

          # Safe copy function
          function Safe-Copy-File {
              param($source, $dest)
              if (Test-Path $source) {
                  Copy-Item $source $dest -Force
                  Write-Host "Copied: $source -> $dest"
                  return $true
              }
              Write-Host "::warning::File not found: $source"
              return $false
          }

          # Copy JSON files
          $copiedFiles = @(
              @{source="audio/audio.json"; dest="../src/assets"},
              @{source="images/backgrounds.json"; dest="../src/assets"},
              @{source="images/characters.json"; dest="../src/assets"},
              @{source="stories/stories.json"; dest="../src/assets"},
              @{source="stories/chapters.json"; dest="../src/assets"}
          )

          $anyCopied = $false
          foreach ($file in $copiedFiles) {
              if (Safe-Copy-File $file.source $file.dest) {
                  $anyCopied = $true
              }
          }

          if (-not $anyCopied) {
              Write-Host "::error::No JSON files were copied!"
              exit 1
          }

          # Move folders
          $folders = @("audio", "images", "stories")
          foreach ($folder in $folders) {
              if (Test-Path $folder) {
                  Move-Item $folder "../public" -Force
                  Write-Host "Moved folder: $folder"
              } else {
                  Write-Host "::warning::Folder not found: $folder"
              }
          }

      # Build process
      - name: Build site
        run: |
          $requiredAssets = @(
              "src/assets/audio.json",
              "src/assets/backgrounds.json"
          )

          foreach ($file in $requiredAssets) {
              if (-not (Test-Path $file)) {
                  Write-Host "::error file=$file::Required file missing"
                  exit 1
              }
          }

          pnpm install --frozen-lockfile
          pnpm build-index
          pnpm build

      # Deployment
      - name: Publish to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
          directory: dist