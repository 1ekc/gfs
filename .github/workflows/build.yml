name: Build Documentation

on:
  workflow_dispatch:
  push:

# –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
#env:
#  CLEAN_CACHE: "true"

permissions:
  contents: write

jobs:
  documentation:
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean Cache (if enabled)
        if: env.CLEAN_CACHE == 'true'
        run: |
          echo "üßπ Force cleaning all caches..."
          rm -rf unpack/downloader/output/*
          rm -rf unpack/downloader/resdata/*
          rm -rf unpack/images/*
          rm -rf unpack/audio/*
          echo "::set-output name=cache-primary-key::$(date +%s)"
          echo "‚úÖ All caches cleaned"
        id: clean-cache

      - name: Log Disk Space
        run: df -h

      - name: Free Disk Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          large-packages: false
          swap-storage: false

      - name: Install System Dependencies
        run: |
          sudo apt update
          sudo apt install -y ffmpeg pngquant imagemagick libfuse2
          wget https://github.com/vgmstream/vgmstream-releases/releases/download/nightly/vgmstream-linux-cli.tar.gz
          tar -zxf vgmstream-linux-cli.tar.gz
          mkdir -p bin
          mv vgmstream-cli bin/
          wget https://imagemagick.org/archive/binaries/magick -O bin/magick
          chmod a+x bin/*
          echo "$(pwd)/bin" >> $GITHUB_PATH

      - name: Setup Python Environment
        run: |
          cd unpack
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          pip install pyjson5 pillow UnityPy tqdm
          echo "Python dependencies installed"

      - name: Restore Downloader Cache
        id: restore-downloader
        uses: actions/cache/restore@v4
        with:
          path: |
            unpack/downloader/output
            unpack/downloader/resdata
          key: ${{ runner.os }}-gf-downloader-${{ hashFiles('unpack/downloader/config.json5') }}
          restore-keys: |
            ${{ runner.os }}-gf-downloader-

      - name: Validate Downloader Cache
        if: steps.restore-downloader.outputs.cache-hit == 'true'
        run: |
          echo "Validating restored cache..."
          [ -f unpack/downloader/resdata/us_resdata.json ] && echo "‚úî us_resdata.json exists" || (echo "‚ùå us_resdata.json missing - invalidating cache" && exit 1)
          [ -f unpack/downloader/output/AVG.acb.dat ] && echo "‚úî AVG.acb.dat exists" || (echo "‚ùå AVG.acb.dat missing - invalidating cache" && exit 1)
          echo "‚úÖ Cache is valid"

      - name: Download Resources
        if: steps.restore-downloader.outputs.cache-hit != 'true' || env.CLEAN_CACHE == 'true'
        env:
          GD_DATA: ${{ secrets.GD_DATA }}
        run: |
          cd unpack/downloader
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è config.json5
          if [ ! -f "config.json5" ]; then
            echo "::error::–§–∞–π–ª config.json5 –Ω–µ –Ω–∞–π–¥–µ–Ω!"
            exit 1
          fi
          # –°–æ–∑–¥–∞–µ–º —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É
          ln -sf config.json5 config.json
          # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
          pip install -r requirements.txt
          # –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
          python downloader.py --folder-id "1YPAEYsvjs8UjMLNogu_VtUIWW0rr4-Ls"
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
          if [ ! -f "resdata/us_resdata.json" ]; then
            echo "::error::–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"
            exit 1
          fi
          echo "::notice::–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
          [ -f output/AVG.acb.dat ] && echo "‚úî AVG.acb.dat downloaded ($(du -h output/AVG.acb.dat | cut -f1))" || echo "‚ùå AVG.acb.dat FAILED TO DOWNLOAD"
          [ -f resdata/us_resdata.json ] && echo "‚úî us_resdata.json downloaded" || echo "‚ùå us_resdata.json FAILED TO DOWNLOAD"

      - name: Save Downloader Cache
        if: always() && (steps.restore-downloader.outputs.cache-hit != 'true' || env.CLEAN_CACHE == 'true')
        uses: actions/cache/save@v4
        with:
          path: |
            unpack/downloader/output
            unpack/downloader/resdata
          key: ${{ steps.restore-downloader.outputs.cache-primary-key }}

      - name: Restore Images Cache
        id: restore-images
        uses: actions/cache/restore@v4
        with:
          path: unpack/images
          key: ${{ runner.os }}-gf-images-${{ hashFiles('unpack/downloader/config.json5') }}-${{ hashFiles('unpack/src/gfunpack/backgrounds.py') }}-${{ hashFiles('unpack/downloader/resdata/us_resdata.json') }}
          restore-keys: |
            ${{ runner.os }}-gf-images-

      - name: Validate Images Cache
        if: steps.restore-images.outputs.cache-hit == 'true'
        run: |
          echo "Validating images cache..."
          [ -f unpack/images/backgrounds.json ] && echo "‚úî backgrounds.json exists" || (echo "‚ùå backgrounds.json missing - invalidating cache" && exit 1)
          [ -d unpack/images/backgrounds ] && echo "‚úî backgrounds directory exists" || (echo "‚ùå backgrounds directory missing - invalidating cache" && exit 1)
          echo "‚úÖ Images cache is valid"

      - name: Restore Audio Cache
        id: restore-audio
        uses: actions/cache/restore@v4
        with:
          path: unpack/audio
          key: ${{ runner.os }}-gf-audio-${{ hashFiles('unpack/downloader/config.json5') }}-${{ hashFiles('unpack/src/gfunpack/audio.py') }}-${{ hashFiles('unpack/downloader/resdata/us_resdata.json') }}
          restore-keys: |
            ${{ runner.os }}-gf-audio-

      - name: Validate Audio Cache
        if: steps.restore-audio.outputs.cache-hit == 'true'
        run: |
          echo "Validating audio cache..."
          [ -f unpack/audio/audio.json ] && echo "‚úî audio.json exists" || (echo "‚ùå audio.json missing - invalidating cache" && exit 1)
          [ -d unpack/audio/acb ] && echo "‚úî acb directory exists" || (echo "‚ùå acb directory missing - invalidating cache" && exit 1)
          echo "‚úÖ Audio cache is valid"

#      - name: Process Resources
#        if: steps.restore-images.outputs.cache-hit != 'true' || steps.restore-audio.outputs.cache-hit != 'true' || env.CLEAN_CACHE == 'true' || failure()
#        run: |
#          cd unpack
#          source .venv/bin/activate
#          echo "Starting resource processing..."
#          echo "Running audio processor..."
#          python src/gfunpack/audio.py "$(pwd)/downloader/output" "$(pwd)/audio" --concurrency 4
#          echo "Running backgrounds processor..."
#          python src/gfunpack/backgrounds.py "$(pwd)/downloader/output" "$(pwd)/images" --concurrency 4
#          echo "Running characters processor..."
#          python src/gfunpack/characters.py "$(pwd)/downloader/output" "$(pwd)/images" --concurrency 4
#          echo "Resource processing completed"
      - name: Process Images
        run: |
          cd unpack
          source .venv/bin/activate
          python tests/test_backgrounds.py
          python tests/test_characters.py

      - name: Save Images Cache
        if: always() && (steps.restore-images.outputs.cache-hit != 'true' || env.CLEAN_CACHE == 'true')
        uses: actions/cache/save@v4
        with:
          path: unpack/images
          key: ${{ steps.restore-images.outputs.cache-primary-key }}

      - name: Save Audio Cache
        if: always() && (steps.restore-audio.outputs.cache-hit != 'true' || env.CLEAN_CACHE == 'true')
        uses: actions/cache/save@v4
        with:
          path: unpack/audio
          key: ${{ steps.restore-audio.outputs.cache-primary-key }}

      - name: Prepare Final Assets
        run: |
          cd unpack
          mkdir -p ../src/assets ../public
          echo "Copying JSON files..."
          cp audio/audio.json images/backgrounds.json images/characters.json ../src/assets/
          echo "Moving assets to public..."
          mv audio images ../public/
          echo "Final assets structure:"
          ls -lh ../src/assets/
          ls -lh ../public/

      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: inspection-logs
          path: |
            asset_contents.json
            unpack/downloader/output/asset_list.txt

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 9.4.0
          run_install: true

      - name: Build Frontend
        run: |
          pnpm install
          pnpm build

      - name: Deploy to Cloudflare
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
          directory: dist