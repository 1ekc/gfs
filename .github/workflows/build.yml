name: Build Documentation

on:
  workflow_dispatch:
  push:

permissions:
  contents: write

jobs:
  documentation:
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Log Disk Space
        run: df -h

      - name: Free Disk Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          large-packages: false
          swap-storage: false

      - name: Install System Dependencies
        run: |
          sudo apt update
          sudo apt install -y ffmpeg pngquant imagemagick libfuse2
          wget https://github.com/vgmstream/vgmstream-releases/releases/download/nightly/vgmstream-linux-cli.tar.gz
          tar -zxf vgmstream-linux-cli.tar.gz
          mkdir -p bin
          mv vgmstream-cli bin/
          wget https://imagemagick.org/archive/binaries/magick -O bin/magick
          chmod a+x bin/*
          echo "$(pwd)/bin" >> $GITHUB_PATH

      - name: Setup Python Environment
        run: |
          cd unpack
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          pip install pyjson5 pillow UnityPy tqdm

      - name: Restore Downloader Cache
        id: restore-downloader
        uses: actions/cache/restore@v4
        with:
          path: |
            unpack/downloader/output
            unpack/downloader/resdata
          key: ${{ runner.os }}-gf-downloader-${{ hashFiles('unpack/downloader/config.json5') }}
          restore-keys: |
            ${{ runner.os }}-gf-downloader-

      - name: Log Cache Restoration
        if: steps.restore-downloader.outputs.cache-hit == 'true'
        run: |
          echo "✅ Cache restored successfully"
          echo "Restored files in output/:"
          ls -lh unpack/downloader/output/
          echo "Restored files in resdata/:"
          ls -lh unpack/downloader/resdata/
          echo "Checking critical files:"
          [ -f unpack/downloader/output/AVG.acb.dat ] && echo "✔ AVG.acb.dat found ($(du -h unpack/downloader/output/AVG.acb.dat | cut -f1))" || echo "❌ AVG.acb.dat MISSING"
          [ -f unpack/downloader/resdata/us_resdata.json ] && echo "✔ us_resdata.json found" || echo "❌ us_resdata.json MISSING"

      - name: Download Resources
        if: steps.restore-downloader.outputs.cache-hit != 'true'
        env:
          GD_DATA: ${{ secrets.GD_DATA }}
        run: |
          cd unpack/downloader
          echo "Files before download:"
          ls -lh output/ || mkdir -p output
          echo "Running downloader..."
          python downloader.py --folder-id "1YPAEYsvjs8UjMLNogu_VtUIWW0rr4-Ls" --verbose
          echo "Files after download:"
          ls -lh output/
          echo "Critical files check:"
          [ -f output/AVG.acb.dat ] && echo "✔ AVG.acb.dat downloaded ($(du -h output/AVG.acb.dat | cut -f1))" || echo "❌ AVG.acb.dat FAILED TO DOWNLOAD"
          [ -f resdata/us_resdata.json ] && echo "✔ us_resdata.json downloaded" || echo "❌ us_resdata.json FAILED TO DOWNLOAD"

      - name: Save Downloader Cache
        if: always() && steps.restore-downloader.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            unpack/downloader/output
            unpack/downloader/resdata
          key: ${{ steps.restore-downloader.outputs.cache-primary-key }}

      - name: Restore Images Cache
        id: restore-images
        uses: actions/cache/restore@v4
        with:
          path: unpack/images
          key: ${{ runner.os }}-gf-images-${{ hashFiles('unpack/downloader/config.json5') }}-${{ hashFiles('unpack/src/gfunpack/backgrounds.py') }}
          restore-keys: |
            ${{ runner.os }}-gf-images-

      - name: Restore Audio Cache
        id: restore-audio
        uses: actions/cache/restore@v4
        with:
          path: unpack/audio
          key: ${{ runner.os }}-gf-audio-${{ hashFiles('unpack/downloader/config.json5') }}-${{ hashFiles('unpack/src/gfunpack/audio.py') }}
          restore-keys: |
            ${{ runner.os }}-gf-audio-

      - name: Process Resources
        if: steps.restore-images.outputs.cache-hit != 'true' || steps.restore-audio.outputs.cache-hit != 'true'
        run: |
          cd unpack
          source .venv/bin/activate
          echo "Starting resource processing..."
          echo "Running audio processor..."
          python src/gfunpack/audio.py "$(pwd)/downloader/output" "$(pwd)/../audio" --concurrency 4
          echo "Running backgrounds processor..."
          python src/gfunpack/backgrounds.py "$(pwd)/downloader/output" "$(pwd)/../images" --concurrency 4
          echo "Running characters processor..."
          python src/gfunpack/characters.py "$(pwd)/downloader/output" "$(pwd)/../images" --concurrency 4
          echo "Resource processing completed"

      - name: Save Images Cache
        if: always() && steps.restore-images.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: unpack/images
          key: ${{ steps.restore-images.outputs.cache-primary-key }}

      - name: Save Audio Cache
        if: always() && steps.restore-audio.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: unpack/audio
          key: ${{ steps.restore-audio.outputs.cache-primary-key }}

      - name: Prepare Final Assets
        run: |
          cd unpack
          mkdir -p ../src/assets ../public
          echo "Copying JSON files..."
          cp audio/audio.json images/backgrounds.json images/characters.json ../src/assets/
          echo "Moving assets to public..."
          mv audio images ../public/
          echo "Final assets structure:"
          ls -lh ../src/assets/
          ls -lh ../public/

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 9.4.0
          run_install: true

      - name: Build Frontend
        run: |
          pnpm install
          pnpm build

      - name: Deploy to Cloudflare
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
          directory: dist