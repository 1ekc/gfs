name: Windows Self-Hosted Build

on:
  workflow_dispatch:
  push:

jobs:
  build:
    runs-on: self-hosted
    environment: production
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Fix console encoding
        run: |
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          chcp 65001 | Out-Null
          git config --global core.quotepath false

      - name: Check Disk Space (Windows)
        run: |
          Get-Volume | Format-Table -AutoSize DriveLetter, SizeRemaining, Size

      - name: Install Windows Dependencies
        run: |
          choco install ffmpeg pngquant imagemagick git-lfs nodejs -y --no-progress
          Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
          refreshenv
          ffmpeg -version
          pngquant --version
          magick --version
          git lfs version
          node --version

      - name: Setup Git LFS
        run: |
          git lfs install
          git lfs track "*.wav" "*.mp3" "*.png" "*.jpg" "*.webp" "*.zip"
          git add .gitattributes

      - name: Install vgmstream
        run: |
          Invoke-WebRequest -Uri "https://github.com/vgmstream/vgmstream-releases/releases/download/nightly/vgmstream-win64.zip" -OutFile "vgmstream.zip"
          Expand-Archive -Path "vgmstream.zip" -DestinationPath "bin" -Force
          Remove-Item -Path "vgmstream.zip"
          echo "$PWD\bin" | Out-File -FilePath $env:GITHUB_PATH -Append -Encoding utf8

      - name: Setup PNPM
        run: |
          npm install -g pnpm
          pnpm -v

      - name: Restore Cached Resources
        id: restore-gf-downloader-resources
        uses: actions/cache/restore@v4
        with:
          path: |
            unpack/downloader/output
          key: gf-downloader-resources-${{ runner.os }}

      - name: Setup Python Environment
        run: |
          python -m pip install --upgrade pip
          pip install pdm
          cd unpack
          pdm config venv.in_project true
          pdm install
          .\.venv\Scripts\activate
          pip install pyjson5
          pip install -r downloader/requirements.txt

      - name: Download Resources (if cache missed)
        if: steps.restore-gf-downloader-resources.outputs.cache-hit != 'true'
        env:
          GD_DATA: ${{ secrets.GD_DATA }}
        run: |
          cd unpack/downloader
          if (!(Test-Path "config.json5")) {
            Write-Error "Файл config.json5 не найден!"
            exit 1
          }
          python downloader.py --folder-id "1YPAEYsvjs8UjMLNogu_VtUIWW0rr4-Ls"

      - name: Cache Downloaded Resources
        uses: actions/cache/save@v4
        with:
          path: |
            unpack/downloader/output
          key: ${{ steps.restore-gf-downloader-resources.outputs.cache-primary-key }}

      # ===== ДОБАВЛЕННЫЕ ШАГИ ИЗ old_build.yml =====
      - name: Restore Cached Images
        id: restore-image-resources
        uses: actions/cache/restore@v4
        with:
          path: |
            unpack/images
          key: gf-image-resources-${{ runner.os }}

      - name: Unpack images
        run: |
          cd unpack
          .\.venv\Scripts\activate
          python tests/test_backgrounds.py
          python tests/test_characters.py

      - name: Cache Images
        uses: actions/cache/save@v4
        with:
          path: |
            unpack/images
          key: ${{ steps.restore-image-resources.outputs.cache-primary-key }}

      - name: Restore Cached Audio
        id: restore-audio-resources
        uses: actions/cache/restore@v4
        with:
          path: |
            unpack/audio
          key: gf-audio-resources-${{ runner.os }}

      - name: Unpack audio
        run: |
          cd unpack
          .\.venv\Scripts\activate
          python tests/test_audio.py

      - name: Cache Audio
        uses: actions/cache/save@v4
        with:
          path: |
            unpack/audio
          key: ${{ steps.restore-audio-resources.outputs.cache-primary-key }}

      - name: Unpack all resources
        run: |
          cd unpack
          .\.venv\Scripts\activate
          python -m gfunpack downloader/output -o .
      # ===== КОНЕЦ ДОБАВЛЕННЫХ ШАГОВ =====

      - name: Move Resources
        run: |
          cd unpack
          # Создаем директории
          New-Item -ItemType Directory -Path "../src/assets" -Force
          New-Item -ItemType Directory -Path "../public" -Force

          # Копируем JSON файлы
          $files = @(
            "audio/audio.json",
            "images/backgrounds.json",
            "images/characters.json",
            "stories/stories.json",
            "stories/chapters.json"
          )
          
          foreach ($file in $files) {
            if (Test-Path $file) {
              Copy-Item $file -Destination "../src/assets" -Force
              Write-Host "Скопирован $file"
            } else {
              Write-Host "::warning::Файл $file не найден"
            }
          }

          # Перемещаем папки
          $folders = @("audio", "images", "stories")
          foreach ($folder in $folders) {
            if (Test-Path $folder) {
              Move-Item $folder -Destination "../public" -Force
              Write-Host "Перемещена папка $folder"
            } else {
              Write-Host "::warning::Папка $folder не найдена"
            }
          }

      - name: Install Project Dependencies
        run: |
          pnpm install --frozen-lockfile

      - name: Build Site
        run: |
          # Проверяем наличие необходимых файлов
          $requiredAssets = @(
            "src/assets/audio.json",
            "src/assets/backgrounds.json"
          )
          
          foreach ($file in $requiredAssets) {
            if (-not (Test-Path $file)) {
              Write-Host "::error::Отсутствует обязательный файл: $file"
              exit 1
            }
          }

          # Сборка
          pnpm build-index
          if ($LASTEXITCODE -ne 0) {
            Write-Host "::error::Ошибка build-index"
            exit 1
          }
          
          pnpm build
          if ($LASTEXITCODE -ne 0) {
            Write-Host "::error::Ошибка сборки"
            exit 1
          }

      - name: Publish to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
          directory: dist