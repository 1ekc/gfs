name: Windows Self-Hosted Build

on:
  workflow_dispatch:
  push:

jobs:
  build:
    runs-on: self-hosted
    environment: production

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      # Проверка дискового пространства
      - name: Check Disk Space
        run: |
          Get-Volume | Format-Table -AutoSize DriveLetter, SizeRemaining, Size

      # Установка системных зависимостей
      - name: Install System Tools
        run: |
          choco install -y ffmpeg pngquant imagemagick git-lfs nodejs python --version=3.10.0
          refreshenv
          git lfs install
          git lfs track "*.wav" "*.mp3" "*.png" "*.jpg" "*.webp" "*.zip"
          git add .gitattributes

      # Установка vgmstream
      - name: Install vgmstream
        run: |
          Invoke-WebRequest -Uri "https://github.com/vgmstream/vgmstream-releases/releases/download/nightly/vgmstream-win64.zip" -OutFile "vgmstream.zip"
          Expand-Archive -Path "vgmstream.zip" -DestinationPath "bin" -Force
          Remove-Item -Path "vgmstream.zip"
          echo "$PWD\bin" | Out-File -FilePath $env:GITHUB_PATH -Append -Encoding utf8

      # Установка PNPM
      - name: Setup PNPM
        run: |
          npm install -g pnpm
          pnpm -v

      # Кэширование ресурсов
      - name: Restore Resources Cache
        id: restore-cache
        uses: actions/cache/restore@v4
        with:
          path: |
            unpack/downloader/output
          key: gf-resources-${{ runner.os }}-${{ github.sha }}

      - name: Clean Python Environment
        run: |
          # Удаляем возможные существующие виртуальные окружения
          if (Test-Path .venv) { Remove-Item -Recurse -Force .venv }
          # Очищаем кэш pip
          python -m pip cache purge
      # Настройка Python окружения
      - name: Setup Python Environment
        run: |
          # Убедимся, что Python доступен
          python --version
          Write-Output "Python path: $(Get-Command python | Select-Object -ExpandProperty Source)"

          # Очистка предыдущего окружения
          if (Test-Path .venv) { 
            Write-Output "Removing existing virtual environment..."
            Remove-Item -Recurse -Force .venv 
          }

          # Создание виртуального окружения с выводом информации
          Write-Output "Creating new virtual environment..."
          python -m venv .venv --verbose

          # Проверка создания окружения
          $venvScripts = Get-ChildItem .venv\Scripts -File
          Write-Output "Virtual environment created with files:"
          $venvScripts | Select-Object Name, FullName | Format-Table -AutoSize

          # Альтернативный способ активации для PowerShell
          $activatePath = "$pwd\.venv\Scripts\Activate.ps1"
          if (!(Test-Path $activatePath)) {
            Write-Error "Activation script not found at $activatePath"
            Get-ChildItem .venv -Recurse | Format-Table FullName
            exit 1
          }

          # Активация окружения
          Write-Output "Activating virtual environment..."
          . $activatePath

          # Проверка активации
          Write-Output "Python after activation: $(Get-Command python | Select-Object -ExpandProperty Source)"

          # Установка пакетов
          pip install --upgrade pip
          pip install --no-cache-dir pyjson5==1.0.3 chardet==5.2.0 UnityPy
          pip install -r unpack/downloader/requirements.txt

          # Проверка установки
          python -c "import pyjson5; print(f'pyjson5 successfully imported from {pyjson5.__file__}')"
     # Загрузка ресурсов (если нет в кэше)
      - name: Verify Environment
        run: |
          .\.venv\Scripts\activate
          # Для Windows используем where вместо which
          echo "Python executable: $(where python)"
          echo "Python version: $(python --version)"
          echo "PYTHONPATH: $env:PYTHONPATH"
          python -m pip list
          python -c "import sys; print('\n'.join(sys.path))"

      - name: Download Resources
        if: steps.restore-cache.outputs.cache-hit != 'true'
        env:
          GD_DATA: ${{ secrets.GD_DATA }}
        run: |
          # Явная активация окружения
          .\.venv\Scripts\activate
          cd unpack/downloader
          python -c "import sys; print(sys.path)"  # Debug paths
          python downloader.py --folder-id "1YPAEYsvjs8UjMLNogu_VtUIWW0rr4-Ls"

      # Сохранение в кэш
      - name: Save Resources Cache
        uses: actions/cache/save@v4
        continue-on-error: true
        with:
          path: |
            unpack/downloader/output
          key: ${{ steps.restore-cache.outputs.cache-primary-key }}

      # Image processing
      - name: Restore Cached Images
        id: restore-image-resources
        uses: actions/cache/restore@v4
        with:
          path: |
            unpack/images
          key: gf-image-resources-${{ runner.os }}

      - name: Process images
        run: |
          cd unpack
          .\.venv\Scripts\activate
          python tests/test_backgrounds.py
          python tests/test_characters.py
      - name: Cache Images
        uses: actions/cache/save@v4
        with:
          path: |
            unpack/images
          key: ${{ steps.restore-image-resources.outputs.cache-primary-key }}

      # Audio processing
      - name: Restore Cached Audio
        id: restore-audio-resources
        uses: actions/cache/restore@v4
        with:
          path: |
            unpack/audio
          key: gf-audio-resources-${{ runner.os }}

      - name: Validate Audio Resources
        run: |
          $requiredAudioFiles = @(
              "unpack/downloader/output/asset_textes.ab",
              "unpack/downloader/output/AVG.acb.dat"
          )
          foreach ($file in $requiredAudioFiles) {
              if (-not (Test-Path $file)) {
                  Write-Host "::error file=$file::Required audio file missing"
                  exit 1
              }
          }
      - name: Process audio
        run: |
          cd unpack
          .\.venv\Scripts\activate
          python tests/test_audio.py
      - name: Verify Audio Output
        run: |
          if (-not (Test-Path "unpack/audio/audio.json")) {
              Write-Host "::error::Audio processing failed - no output JSON"
              exit 1
          }
          $audioJson = Get-Content "unpack/audio/audio.json" | ConvertFrom-Json
          if ($audioJson.Count -eq 0) {
              Write-Host "::error::Audio JSON is empty"
              exit 1
          }

      - name: Cache Audio
        uses: actions/cache/save@v4
        with:
          path: |
            unpack/audio
          key: ${{ steps.restore-audio-resources.outputs.cache-primary-key }}

      # Распаковка ресурсов
      - name: Unpack Resources
        run: |
          .\.venv\Scripts\activate
          cd unpack
          # Прямой вызов main.py вместо импорта
          python gfunpack/main.py downloader/output -o .
          
          # Проверка файлов
          if (-not (Test-Path "audio/audio.json")) { 
            Write-Error "audio.json not created!"
            exit 1
          }
          if (-not (Test-Path "images/backgrounds.json")) { 
            Write-Error "backgrounds.json not created!"
            exit 1
          }

      # Перенос ресурсов
      - name: Move Resources
        run: |
          cd unpack
          New-Item -ItemType Directory -Path ../src/assets -Force
          Copy-Item -Path audio/audio.json, images/backgrounds.json, images/characters.json, stories/stories.json, stories/chapters.json -Destination ../src/assets
          New-Item -ItemType Directory -Path ../public -Force
          Move-Item -Path audio, images, stories -Destination ../public

      # Сборка проекта
      - name: Install Project Dependencies
        run: |
          pnpm install --frozen-lockfile

      - name: Build Project
        run: |
          pnpm build-index
          pnpm build

      # Деплой
      - name: Deploy to Cloudflare
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
          directory: dist