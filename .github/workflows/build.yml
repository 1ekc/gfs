name: Windows Self-Hosted Build

on:
  workflow_dispatch:
  push:
jobs:
  build:
    runs-on: self-hosted
    environment: production
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      # Установка UTF-8 для поддержки кириллицы
      - name: Configure UTF-8 environment
        run: |
          echo "PYTHONIOENCODING=utf-8" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          chcp 65001  # Устанавливаем кодовую страницу UTF-8 для консоли

      # Кэширование с улучшенным ключом
      - name: Cache venv
        uses: actions/cache@v3
        id: cache-venv
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('.github/workflows/*.yml') }}

      # Создание и настройка venv
      - name: Create virtual environment
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python -m venv .venv
          .\.venv\Scripts\activate
          python -m pip install --upgrade pip wheel
#      - name: Install dependencies
#        run: |
#          .\.venv\Scripts\activate
#          pip install --force-reinstall -r requirements.txt
#      # Package installation
      - name: Install Windows Dependencies
        run: |
          choco install ffmpeg pngquant imagemagick git-lfs nodejs -y --no-progress
          Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
          refreshenv
          ffmpeg -version
          pngquant --version
          magick --version
          git lfs version
          node --version

#      - name: Setup Git LFS
#        run: |
#          git lfs install
#          git lfs track "*.wav" "*.mp3" "*.png" "*.jpg" "*.webp" "*.zip"
#          git add .gitattributes

      - name: Install vgmstream
        run: |
          Invoke-WebRequest -Uri "https://github.com/vgmstream/vgmstream-releases/releases/download/nightly/vgmstream-win64.zip" -OutFile "vgmstream.zip"
          Expand-Archive -Path "vgmstream.zip" -DestinationPath "bin" -Force
          Remove-Item -Path "vgmstream.zip"
          echo "$PWD\bin" | Out-File -FilePath $env:GITHUB_PATH -Append -Encoding utf8

      - name: Setup PNPM
        run: |
          npm install -g pnpm
          pnpm -v

      - name: Restore Cached Resources
        id: restore-gf-downloader-resources
        uses: actions/cache/restore@v4
        with:
          path: |
            unpack/downloader/output
          key: gf-downloader-resources-${{ runner.os }}

      - name: Setup Python Environment
        run: |
          python -m pip install --upgrade pip
          pip install pdm
          cd unpack
          pdm config venv.in_project true
          pdm install
          .\.venv\Scripts\Activate.ps1
          pip install pyjson5 chardet  # Критически важные зависимости
          pip install -r downloader/requirements.txt

      - name: Download Resources (if cache missed)
        if: steps.restore-gf-downloader-resources.outputs.cache-hit != 'true'
        env:
          GD_DATA: ${{ secrets.GD_DATA }}
        run: |
          cd unpack/downloader
          if (!(Test-Path "config.json5")) {
            Write-Error "Файл config.json5 не найден!"
            exit 1
          }
          python downloader.py --folder-id "1YPAEYsvjs8UjMLNogu_VtUIWW0rr4-Ls"

      - name: Cache Downloaded Resources
        uses: actions/cache/save@v4
        with:
          path: |
            unpack/downloader/output
          key: ${{ steps.restore-gf-downloader-resources.outputs.cache-primary-key }}

      # ===== КОРРЕКТИРОВКА ДЛЯ ИЗОБРАЖЕНИЙ И АУДИО =====
      - name: Restore Cached Images
        id: restore-image-resources
        uses: actions/cache/restore@v4
        with:
          path: |
            unpack/images
          key: gf-image-resources-${{ runner.os }}

      - name: Unpack images
        run: |
          cd unpack
          .\.venv\Scripts\Activate.ps1
          $env:PYTHONPATH = "$pwd\src"  # Ключевое исправление
          python tests/test_backgrounds.py
          python tests/test_characters.py

      - name: Cache Images
        uses: actions/cache/save@v4
        with:
          path: |
            unpack/images
          key: ${{ steps.restore-image-resources.outputs.cache-primary-key }}

      - name: Restore Cached Audio
        id: restore-audio-resources
        uses: actions/cache/restore@v4
        with:
          path: |
            unpack/audio
          key: gf-audio-resources-${{ runner.os }}

      - name: Unpack audio
        run: |
          cd unpack
          .\.venv\Scripts\Activate.ps1
          $env:PYTHONPATH = "$pwd\src"  # Ключевое исправление
          python tests/test_audio.py

      - name: Cache Audio
        uses: actions/cache/save@v4
        with:
          path: |
            unpack/audio
          key: ${{ steps.restore-audio-resources.outputs.cache-primary-key }}

      # ===== КОРРЕКТИРОВКА ДЛЯ РАСПАКОВКИ РЕСУРСОВ =====
      - name: Unpack resources
        run: |
          $ErrorActionPreference = "Stop"
          cd unpack
          
          # Явный путь к интерпретатору
          $python = "$pwd\.venv\Scripts\python.exe"
          
          # Проверка доступности chardet
          & $python -c "import chardet; print('chardet version:', chardet.__version__)"
          
          # Запуск распаковки
          & $python -m gfunpack downloader/output -o .
          
          # Проверка созданных файлов
          $requiredFiles = @(
              "audio/audio.json",
              "images/backgrounds.json",
              "images/characters.json",
              "stories/stories.json",
              "stories/chapters.json"
          )
          foreach ($file in $requiredFiles) {
              if (-not (Test-Path $file)) {
                  Write-Host "::warning file=$file::File $file not found"
              } else {
                  Write-Host "Found file: $file"
              }
          }

      # ===== ПЕРЕМЕЩЕНИЕ РЕСУРСОВ =====
      - name: Move resources
        run: |
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          cd unpack
          
          # Создаем директории
          New-Item -ItemType Directory -Path "../src/assets" -Force | Out-Null
          New-Item -ItemType Directory -Path "../public" -Force | Out-Null
          
          # Копируем JSON файлы
          $copiedFiles = @(
              @{source="audio/audio.json"; dest="../src/assets"},
              @{source="images/backgrounds.json"; dest="../src/assets"},
              @{source="images/characters.json"; dest="../src/assets"},
              @{source="stories/stories.json"; dest="../src/assets"},
              @{source="stories/chapters.json"; dest="../src/assets"}
          )
          foreach ($file in $copiedFiles) {
              if (Test-Path $file.source) {
                  Copy-Item $file.source $file.dest -Force
                  Write-Host "Copied: $($file.source) -> $($file.dest)"
              } else {
                  Write-Host "::warning::File not found: $($file.source)"
              }
          }
          
          # Перемещаем папки
          $folders = @("audio", "images", "stories")
          foreach ($folder in $folders) {
              if (Test-Path $folder) {
                  Move-Item $folder "../public" -Force
                  Write-Host "Moved folder: $folder"
              } else {
                  Write-Host "::warning::Folder not found: $folder"
              }
          }

      # ===== СБОРКА САЙТА =====
      - name: Build site
        run: |
          # Проверяем наличие необходимых файлов
          $requiredAssets = @(
              "src/assets/audio.json",
              "src/assets/backgrounds.json",
              "src/assets/characters.json",
              "src/assets/stories.json",
              "src/assets/chapters.json"
          )
          foreach ($file in $requiredAssets) {
              if (-not (Test-Path $file)) {
                  Write-Host "::error file=$file::Required file missing"
                  exit 1
              }
          }
          
          # Сборка
          pnpm install --frozen-lockfile
          pnpm build-index
          pnpm build

      # ===== ПУБЛИКАЦИЯ =====
      - name: Publish to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
          directory: dist