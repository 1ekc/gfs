name: Build Documentation

on:
  workflow_dispatch:
  push:

permissions:
  contents: write

jobs:
  documentation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          token: ${{ secrets.GITHUB_TOKEN }}  # Раскомментировано, необходимо для подмодулей

      - name: Log Disk Space
        run: df -h

      - name: Free Disk Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          large-packages: false
          swap-storage: false

      - name: Install System Dependencies
        run: |
          sudo apt update
          sudo apt install -y ffmpeg pngquant imagemagick libfuse2
          wget https://github.com/vgmstream/vgmstream-releases/releases/download/nightly/vgmstream-linux-cli.tar.gz
          tar -zxf vgmstream-linux-cli.tar.gz
          mkdir -p bin
          mv vgmstream-cli bin/
          wget https://imagemagick.org/archive/binaries/magick -O bin/magick
          chmod a+x bin/*
          echo "$(pwd)/bin" >> $GITHUB_PATH

      - name: Setup Python Environment
        run: |
          cd unpack
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          pip install pyjson5 pillow

      - name: Restore Cached Resources
        id: restore-gf-downloader-resources
        uses: actions/cache/restore@v4
        with:
          path: |
            unpack/downloader/output
          key: gf-downloader-resources-${{ hashFiles('unpack/downloader/requirements.txt') }}

      - name: Setup PDM
        uses: pdm-project/setup-pdm@v4

      - name: Install Python Dependencies
        run: |
          cd unpack
          source .venv/bin/activate
          pdm install
          pip install -r downloader/requirements.txt

      - name: Fix Logging Configuration
        run: |
          cd unpack/downloader
          # Создаем минимальный конфиг логгера
          mkdir -p logger_tt
          echo '{"version":1,"disable_existing_loggers":false}' > logger_tt/log_config.json
          # Заменяем проблемную функцию
          sed -i "s/setup_mp_logging()/import logging; logging.basicConfig(level=logging.INFO)/" downloader.py

      - name: Download Resources
        env:
          GFL_RESDATA: ${{ secrets.GFL_RESDATA }}
        run: |
          # Переходим в нужную директорию
          cd unpack/downloader

          # Проверяем наличие config.json5
          echo "Проверяем структуру файлов:"
          ls -la

          # Явно копируем config.json5 из репозитория
          cp ../../../config.json5 ./config.json5

          # Проверяем что файл скопировался
          echo "Содержимое config.json5:"
          cat config.json5

          # Создаем необходимые директории
          mkdir -p output resdata

          # Устанавливаем зависимости
          pip install -r requirements.txt

          # Запускаем скрипт
          python downloader.py

          # Проверяем результат
          if [ ! -f "resdata/us_resdata.json" ]; then
            echo "::error::Не удалось загрузить us_resdata.json"
            exit 1
          fi
          echo "::notice::Ресурсы успешно загружены"

      - name: Cache Downloaded Resources
        uses: actions/cache/save@v4
        with:
          path: |
            unpack/downloader/output
          key: ${{ steps.restore-gf-downloader-resources.outputs.cache-primary-key }}

      - name: Restore Image Cache
        id: restore-image-resources
        uses: actions/cache/restore@v4
        with:
          path: |
            unpack/images
          key: gf-image-resources-${{ hashFiles('unpack/tests/test_backgrounds.py') }}

      - name: Process Images
        run: |
          cd unpack
          source .venv/bin/activate
          python tests/test_backgrounds.py
          python tests/test_characters.py

      - name: Cache Processed Images
        uses: actions/cache/save@v4
        with:
          path: |
            unpack/images
          key: ${{ steps.restore-image-resources.outputs.cache-primary-key }}

      - name: Restore Audio Cache
        id: restore-audio-resources
        uses: actions/cache/restore@v4
        with:
          path: |
            unpack/audio
          key: gf-audio-resources-${{ hashFiles('unpack/tests/test_audio.py') }}

      - name: Process Audio
        run: |
          cd unpack
          source .venv/bin/activate
          python tests/test_audio.py

      - name: Cache Processed Audio
        uses: actions/cache/save@v4
        with:
          path: |
            unpack/audio
          key: ${{ steps.restore-audio-resources.outputs.cache-primary-key }}

      - name: Unpack All Resources
        run: |
          cd unpack
          source .venv/bin/activate
          python -m gfunpack downloader/output -o .

      - name: Prepare Final Assets
        run: |
          cd unpack
          mkdir -p ../src/assets ../public
          cp audio/audio.json images/backgrounds.json images/characters.json stories/stories.json stories/chapters.json ../src/assets/
          mv audio images stories ../public/

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 9.4.0
          run_install: true  # Автоматически запускает pnpm install

      - name: Build Frontend
        run: |
          pnpm build-index
          pnpm build

      - name: Deploy to Cloudflare
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
          directory: dist