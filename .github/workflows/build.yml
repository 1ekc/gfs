name: Windows Self-Hosted Build

on:
  workflow_dispatch:
  push:

jobs:
  build:
    runs-on: self-hosted
    environment: production
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Fix console encoding
        run: |
          # Устанавливаем UTF-8 для PowerShell
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          chcp 65001 | Out-Null
          # Для git (если используется)
          git config --global core.quotepath false

      - name: Check Disk Space (Windows)
        run: |
          Get-Volume | Format-Table -AutoSize DriveLetter, SizeRemaining, Size

      - name: Install Windows Dependencies
        run: |
          # Проверяем и устанавливаем только отсутствующие пакеты
          choco install ffmpeg pngquant imagemagick git-lfs nodejs -y --no-progress
          
          # Обновляем переменные среды для PowerShell
          Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
          refreshenv
          
          # Проверяем установленные версии
          ffmpeg -version
          pngquant --version
          magick --version
          git lfs version
          node --version

      - name: Setup Git LFS
        run: |
          git lfs install
          git lfs track "*.wav" "*.mp3" "*.png" "*.jpg" "*.webp" "*.zip"
          git add .gitattributes

      - name: Install vgmstream
        run: |
          Invoke-WebRequest -Uri "https://github.com/vgmstream/vgmstream-releases/releases/download/nightly/vgmstream-win64.zip" -OutFile "vgmstream.zip"
          Expand-Archive -Path "vgmstream.zip" -DestinationPath "bin" -Force
          Remove-Item -Path "vgmstream.zip"
          echo "$PWD\bin" | Out-File -FilePath $env:GITHUB_PATH -Append -Encoding utf8

      - name: Setup PNPM
        run: |
          npm install -g pnpm
          pnpm -v

      - name: Restore Cached Resources
        id: restore-gf-downloader-resources
        uses: actions/cache/restore@v4
        with:
          path: |
            unpack/downloader/output
          key: gf-downloader-resources-${{ runner.os }}

      - name: Setup Python Environment
        run: |
          python -m pip install --upgrade pip
          pip install pdm
          cd unpack
          pdm config venv.in_project true
          pdm install
          .\.venv\Scripts\activate
          pip install pyjson5
          pip install -r downloader/requirements.txt

      - name: Download Resources (if cache missed)
        if: steps.restore-gf-downloader-resources.outputs.cache-hit != 'true'
        env:
          GD_DATA: ${{ secrets.GD_DATA }}
        run: |
          cd unpack/downloader
          if (!(Test-Path "config.json5")) {
            Write-Error "Файл config.json5 не найден!"
            exit 1
          }
          python downloader.py --folder-id "1YPAEYsvjs8UjMLNogu_VtUIWW0rr4-Ls"

      - name: Cache Downloaded Resources
        uses: actions/cache/save@v4
        with:
          path: |
            unpack/downloader/output
          key: ${{ steps.restore-gf-downloader-resources.outputs.cache-primary-key }}

      - name: Unpack resources
        run: |
          # Фиксируем кодировку
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          chcp 65001 | Out-Null

          # Переходим в папку с кодом
          cd unpack/src

          # Устанавливаем текущую директорию в PYTHONPATH
          $env:PYTHONPATH = "$(Get-Location);$env:PYTHONPATH"

          Write-Host "PYTHONPATH: $env:PYTHONPATH"
          Write-Host "Содержимое gfunpack:"
          Get-ChildItem gfunpack -File | Format-Table Name

          # Запускаем основной скрипт
          python gfunpack/__main__.py ../../downloader/output -o ../../

          # Проверяем результат
          if ($LASTEXITCODE -ne 0) {
            Write-Host "::error::Ошибка распаковки (код $LASTEXITCODE)"
            exit 1
          }

          # Проверяем созданные файлы
          if (-not (Test-Path "../../audio/audio.json")) {
            Write-Host "::error::Файл audio.json не создан"
            Get-ChildItem "../../audio" -ErrorAction SilentlyContinue
            exit 1
          }

      - name: Move Resources
        run: |
          # Создаем директории (если их нет)
          New-Item -ItemType Directory -Path "../src/assets" -Force
          New-Item -ItemType Directory -Path "../public" -Force

          # Копируем JSON файлы (с проверкой)
          $copied = $false
          if (Test-Path "audio/audio.json") {
            Copy-Item "audio/audio.json" -Destination "../src/assets" -Force
            $copied = $true
          }
          if (Test-Path "images/backgrounds.json") {
            Copy-Item "images/backgrounds.json" -Destination "../src/assets" -Force
            $copied = $true
          }
          # ... аналогично для остальных файлов

          if (-not $copied) {
            Write-Host "::error::Ни один JSON-файл не был скопирован!"
            exit 1
          }

          # Перемещаем папки (если существуют)
          if (Test-Path "audio") {
            Move-Item "audio" -Destination "../public" -Force
          }
          if (Test-Path "images") {
            Move-Item "images" -Destination "../public" -Force
          }
          if (Test-Path "stories") {
            Move-Item "stories" -Destination "../public" -Force
          }

          # Логируем результат
          Write-Host "Скопированы файлы:"
          Get-ChildItem "../src/assets" | Format-Table Name
          Write-Host "Перемещены папки:"
          Get-ChildItem "../public" | Format-Table Name

      - name: Install Project Dependencies
        run: |
          pnpm install --frozen-lockfile

      - name: Debug Before Build
        run: |
          Write-Host "### Проверка файлов перед сборкой ###"
          Write-Host "Содержимое src/assets:"
          Get-ChildItem "src/assets" | Format-Table FullName
          Write-Host "Содержимое public:"
          Get-ChildItem "public" -Recurse | Select-Object FullName

      - name: Build Site
        run: |
          # Убедимся, что файлы на месте
          Get-ChildItem "../src/assets" | Format-Table Name

          # Установим cross-env для Windows-совместимости
          pnpm add -D cross-env

          # Собираем проект
          pnpm build-index || (
            Write-Host "::error::Ошибка build-index. Проверьте пути к JSON-файлам"
            exit 1
          )

          pnpm build || (
            Write-Host "::error::Ошибка сборки"
            exit 1
          )

      - name: Publish to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
          directory: dist
