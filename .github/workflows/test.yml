name: Audio Debug Test

on:
  workflow_dispatch:
    inputs:
      test_file:
        description: "Specific .dat file to test"
        required: false
        default: "BGM.acb.dat"

jobs:
  audio-test:
    runs-on: self-hosted
    timeout-minutes: 15
    environment: production

    steps:
      - uses: actions/checkout@v4

      - name: Setup environment
        run: |
          # Проверка существующих инструментов
          ffmpeg -version
          python --version

          # Создаем рабочую директорию
          mkdir test_workspace
          cd test_workspace

      - name: Download test assets
        run: |
          # Копируем только указанный тестовый файл
          cp "../unpack/downloader/output/${{ inputs.test_file }}" .
          echo "Testing with file: ${{ inputs.test_file }}"

      - name: Install vgmstream (alternative source)
        run: |
          cd test_workspace
          
          # Альтернативный надежный источник
          $vgmUrl = "https://files.vgmstream.org/win64/vgmstream-win64.zip"
          
          # Попытка скачивания с таймаутом
          try {
              $ProgressPreference = 'SilentlyContinue'
              Invoke-WebRequest -Uri $vgmUrl -OutFile "vgmstream.zip" -TimeoutSec 30
              Expand-Archive -Path "vgmstream.zip" -DestinationPath "." -Force
              rm "vgmstream.zip"
          } catch {
              Write-Host "::warning::Failed to download from primary source, trying backup..."
              $vgmUrl = "https://github.com/losnoco/vgmstream-releases/releases/download/nightly/vgmstream-win64.zip"
              Invoke-WebRequest -Uri $vgmUrl -OutFile "vgmstream.zip" -TimeoutSec 30
              Expand-Archive -Path "vgmstream.zip" -DestinationPath "." -Force
              rm "vgmstream.zip"
          }

          # Проверка установки
          if (Test-Path "test/vgmstream-cli.exe") {
              echo "VGMStream installed successfully"
              ./test/vgmstream-cli.exe -V
          } else {
              echo "::error::VGMStream installation failed"
              Get-ChildItem -Recurse | Format-Table Name, Length
              exit 1
          }

      - name: Run conversion test
        run: |
          cd test_workspace
          
          # Конвертируем тестовый файл
          ./test/vgmstream-cli.exe "${{ inputs.test_file }}" -o "output.wav"
          
          # Проверяем результат
          if (Test-Path "output.wav") {
              echo "WAV file created successfully"
              ffmpeg -i "output.wav" -c:a aac "output.m4a"
              
              if (Test-Path "output.m4a") {
                  echo "M4A file created successfully"
                  mkdir "../test_output"
                  cp "output.m4a" "../test_output/"
              else
                  echo "::error::FFmpeg conversion failed"
                  exit 1
              fi
          else
              echo "::error::VGMStream conversion failed"
              exit 1
          fi

      - name: Verify results
        run: |
          if (Test-Path "test_output/output.m4a") {
              echo "::set-output name=result::SUCCESS"
              echo "Test completed successfully"
          else
              echo "::set-output name=result::FAILED"
              echo "::error::Final output file not found"
              exit 1
          fi